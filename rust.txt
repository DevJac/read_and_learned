------------------------------
Tutorial
------------------------------

`cargo new project_name --bin` to start a new project.
`cargo build` to build.
`cargo run` to run.

----------------------------------------
Variable Bindings & Primitive Types
----------------------------------------

Examples:
  let x = 5;
  let (x, y) = (5, 10);

The `(x, y)` in `let (x, y) = (1, 2)` is a pattern. All let statements have a
pattern on the left side of the equal.

Primitive Types:
  i8
  i16
  i32
  i64
  isize - pointer sized i (signed integer)
  u8
  u16
  u32
  u64
  usize - pointer size u (unsigned integer)
  bool
  char
  f32
  f64
  arrays - fixed sized arrays of a specific type and [fixed] size
  slices - like a pointer with a length, they can refer to arrays and maybe other things
  str
  tuples - like Haskell tuples, fixed size, but can hold multiple types
           access tuple items with pattern matching or indexing
  functions - functions have a type that shows what types they accept and what they return

`let x: i64 = 5` shows a type annotation.

Variables (or "bindings" as they're called in Rust) are immutable by default.
Use the `mut` keyword to make them mutable.

`println!` has `{}` formatting similar to Python.

You can shadow bindings and create new blocks anywhere just by opening a new
pair of curly-braces {}.

--------------------------
Modules
--------------------------

`use std::io` will bring the `io` name into scope.

Rust will give a compile error if there are multiple definitions for the same
name.

Example of some advance uses:
  use sayings::japanese::greetings as ja_greetings;
  use sayings::japanese::farewells::*;
  use sayings::english::{self, greetings as en_greetings, farewells as en_farewells};

-----------------------------------
Basic Control Structures
-----------------------------------

If structures are statements, and thus can be used in assignment, like:
  let y = if x == 1 { 1 } else { 0 };

If statements without an else clause always evaluate to ().

`loop` is like a `while True`, it just loops forever.

For loops have the form: `for var in expression { code }`
The expression must evaluate to an iterator using the IntoIterator trait.

Rust has the standard `break` and `continue` keywords.

Example of loop labels:
  'outer: for x in 0..10 {
      'inner: for y in 0..10 {
          if x % 2 == 0 { continue 'outer; } // continues the loop over x
          if y % 2 == 0 { continue 'inner; } // continues the loop over y
          println!("x: {}, y: {}", x, y);
      }
  }

------------------------------------------
Vectors
------------------------------------------

Examples of creating vectors:
  let v = vec![0; 10]; // ten zeroes
  let v = vec![1, 2, 3, 4, 5]; // v: Vec<i32>

Accessing vector items is done with square braces starting with zero, like in
Python or most languages.

----------------------------------
Ownership, Borrowing, Lifetimes
----------------------------------

Each value (or piece of data) can only be "owned" by only one binding (or variable name)
at a time. It is an error to use the value a binding refers to if that binding does
not have ownership.

The `Copy` trait results in values being copied rather than ownership
being transfered.

`&` creates a reference. References are immutable by default, but there are
`&mut` references as well.

The rules of references:
  - A reference can't have a larger scope than the owner.
  - You can have exactly one mutable reference, OR many immutable references.

Lifetimes describe the scope in which a reference is valid.

All references have a lifetime, but some are implicit and can be omitted:
  // implicit
  fn foo(x: &i32) {
  }
  // explicit
  fn bar<'a>(x: &'a i32) {
  }

(TODO: Review the 3 concepts again, especially lifetimes, what are they useful for?)
