* About
These are notes I'm taking while doing Rust exercises on exercism.io.
* Rust
** examples
*** guessing game
#+BEGIN_SRC rust
  use std::io;
  use std::cmp::Ordering;
  use rand::Rng;

  fn main() {
      println!("Guess the number!");

      let secret_number = rand::thread_rng().gen_range(1, 101);

      loop {
          println!("Please input your guess.");

          let mut guess = String::new();

          io::stdin().read_line(&mut guess)
              .expect("Failed to read line");

          let guess: u32 = match guess.trim().parse() {
              Ok(num) => num,
              Err(_) => continue,
          };

          println!("You guessed: {}", guess);

          match guess.cmp(&secret_number) {
              Ordering::Less => println!("Too small!"),
              Ordering::Greater => println!("Too big!"),
              Ordering::Equal => {
                  println!("You win!");
                  break;
              }
          }
      }
  }
#+END_SRC
*** rectangle area
#+BEGIN_SRC rust
  struct Rectangle {
      width: u32,
      height: u32,
  }

  fn main() {
      let rect1 = Rectangle { width: 30, height: 50 };

      println!(
          "The area of the rectangle is {} square pixels.",
          area(&rect1)
      );
  }

  fn area(rectangle: &Rectangle) -> u32 {
      rectangle.width * rectangle.height
  }
#+END_SRC
** common types
*** integer types
~i8~ and ~u8~ are 8-bit signed and unsigned integers, respectively.
There is also ~i16~, ~u32~, etc, up to 128.
*** floating point
Rust's floating point types are ~f32~ and ~f64~. The default is ~f64~.
*** boolean
The ~Boolean~ values are ~true~ and ~false~ (lowercase).
*** tuple
#+BEGIN_SRC rust
  let tup: (i32, f64, u8) = (500, 6.4, 1);
  let (x, y, z) = tup;
  let five_hundred = tup.0;
  let six_point_four = tup.1;
#+END_SRC
*** array
#+BEGIN_SRC rust
  let a: [i32; 5] = [1, 2, 3, 4, 5];
  let one = a[0];
#+END_SRC
*** Vector
#+BEGIN_SRC rust
  let mut v = Vec::new();

  v.push(5);
  v.push(6);
  v.push(7);
  v.push(8);

  let v = vec![1, 2, 3, 4, 5];

  let third: &i32 = &v[2];
  println!("The third element is {}", third);

  match v.get(2) {
      Some(third) => println!("The third element is {}", third),
      None => println!("There is no third element."),
  }

  let mut v = vec![100, 32, 57];
  for i in &mut v {
      ,*i += 50;
  }
#+END_SRC
*** HashMap
#+BEGIN_SRC rust
  use std::collections::HashMap;

  let mut scores = HashMap::new();

  scores.insert(String::from("Blue"), 10);
  scores.insert(String::from("Yellow"), 50);

  let team_name = String::from("Blue");
  let score = scores.get(&team_name);
#+END_SRC
*** String
~&str~ is a "string slice", it is the "slice" of the compiled binary that contains a string literal.
String literals have type ~&str~, they are a borrowed reference to a "slice" of the compiled binary, who is the owner of the string.
~String~ is a struct.
Rust will coerce ~&String~ into ~&str~, using "deref coercion".
** control flow
*** if statement expression
~if~ statements can be expressions:
#+BEGIN_SRC rust
let number = if condition {
        5
    } else {
        6
    };
#+END_SRC
*** loop label
~loop~ creates an infinite loop, and can have a label:
#+BEGIN_SRC rust
  'label: loop {
      ...
  }
#+END_SRC
** struct
*** basic example
#+BEGIN_SRC rust
  struct User {
      username: String,
      email: String,
      sign_in_count: u64,
      active: bool,
  }
  let user1 = User {
      email: String::from("someone@example.com"),
      username: String::from("someusername123"),
      active: true,
      sign_in_count: 1,
  };
  let user2 = User {
      email: String::from("another@example.com"),
      username: String::from("anotherusername567"),
      active: user1.active,
      sign_in_count: user1.sign_in_count,
  };
  let user3 = User {
      email: String::from("another@example.com"),
      username: String::from("anotherusername567"),
      ..user1
  };
#+END_SRC
*** methods
#+BEGIN_SRC rust
  #[derive(Debug)]
  struct Rectangle {
      width: u32,
      height: u32,
  }

  impl Rectangle {
      fn area(&self) -> u32 {
          self.width * self.height
      }

      fn can_hold(&self, other: &Rectangle) -> bool {
          self.width > other.width && self.height > other.height
      }
  }

  // There can be multiple impl blocks (but best avoided).
  impl Rectangle {
      // This is an "associated function"; notice that it does not take &self .
      fn square(size: u32) -> Rectangle {
          Rectangle { width: size, height: size }
      }
  }

  fn main() {
      let rect1 = Rectangle { width: 30, height: 50 };
      let rect2 = Rectangle::square(3);

      println!(
          "Rectangle areas: {} {}",
          rect1.area(),
          rect2.area()
      );
  }
#+END_SRC
** enum (algebraic data type)
*** example
#+BEGIN_SRC rust
  enum Message {
      Quit,
      Move { x: i32, y: i32 },
      Write(String),
      ChangeColor(i32, i32, i32),
  }

  impl Message {
      fn call(&self) {
          // method body would be defined here
      }
  }

  let m = Message::Write(String::from("hello"));
  m.call();

  enum Coin {
      Penny,
      Nickel,
      Dime,
      Quarter,
  }

  fn value_in_cents(coin: Coin) -> u32 {
      match coin {
          Coin::Penny => {
              println!("Lucky penny!");
              1
          },
          Coin::Nickel => 5,
          Coin::Dime => 10,
          Coin::Quarter => 25,
      }
  }
#+END_SRC
*** if let
#+BEGIN_SRC rust
  fn main() {
      let some_u8_value = Some(0u8);

      match some_u8_value {
          Some(3) => println!("three"),
          _ => (),
      }

      // The above match can be rewriten as follows:

      if let Some(3) = some_u8_value {
          println!("three");
      }
  }
#+END_SRC
** packages, crates, and modules
*** use
~use A::B::C;~ brings the identifier ~C~ into scope.
~use A::B::{C, D};~ bring the identifier ~C~ and ~D~ into scope.
~use A::B::*~ brings all public items in ~A::B~ into scope.
You can refer to modules by their full path without requiring a ~use~ statement.
** errors
*** panic!
There is no way to recover from a ~panic!~.
*** Result
#+BEGIN_SRC rust
  enum Result<T, E> {
      Ok(T),
      Err(E),
  }
#+END_SRC

~unwrap~ and ~expect~ turn ~Err~ into ~panic!~.

~?~ can be used in functions that return ~Result~ and will cause errors to be propagated out of the function. Error types are converted implicitly using the ~From~ trait.
** traits
*** defining and implementing traits
#+BEGIN_SRC rust
  pub trait Summary {
      // This is a default implementation.
      fn summarize(&self) -> String {
          String::from("(Read more...)")
      }
  }

  pub struct NewsArticle {
      pub headline: String,
      pub location: String,
      pub author: String,
      pub content: String,
  }

  impl Summary for NewsArticle {
      fn summarize(&self) -> String {
          format!("{}, by {} ({})", self.headline, self.author, self.location)
      }
  }

  pub struct Tweet {
      pub username: String,
      pub content: String,
      pub reply: bool,
      pub retweet: bool,
  }

  impl Summary for Tweet {
      fn summarize(&self) -> String {
          format!("{}: {}", self.username, self.content)
      }
  }
#+END_SRC
*** accepting and returning traits
#+BEGIN_SRC rust
  pub fn notify(item: impl Summary + Display) { ... }

  // What's above is short for what's below.

  pub fn notify<T: Summary + Display>(item: T) { ... }

  // This syntax is sometimes more readable.
  fn some_function<T, U>(t: T, u: U) -> i32
  where T: Display + Clone,
        U: Clone + Debug
  { ... }

  // You can return traits.
  fn returns_summarizable() -> impl Summary { ... }
#+END_SRC
** iterators
#+BEGIN_SRC rust
  struct Counter {
      count: u32,
  }

  impl Counter {
      fn new() -> Counter {
          Counter { count: 0 }
      }
  }

  impl Iterator for Counter {
      type Item = u32;

      fn next(&mut self) -> Option<Self::Item> {
          self.count += 1;

          // We only want to count from 1 to 5.
          if self.count < 6 {
              Some(self.count)
          } else {
              None
          }
      }
  }
#+END_SRC
** references and dereferencing
#+BEGIN_SRC rust
  fn main() {
      let x = 5;
      let y = &x;

      assert_eq!(5, x);
      assert_eq!(5, *y);
  }
#+END_SRC
** smart pointers
*** related traits
**** Deref
Types that implement ~Deref~ can be dereferenced.
**** Drop
The ~Drop~ lets you implement your own "destructors".
*** Box
A smart pointer to heap data.
*** Rc
Allows multiple owners using reference counting.
** error handling
#+begin_src rust
  use std::error::Error;
  use std::fmt;

  #[derive(Debug)]
  struct SuperError {
      source: SourceError,
  }

  impl fmt::Display for SuperError {
      fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
          write!(f, "SuperError Display")
      }
  }

  impl Error for SuperError {
      fn source(&self) -> Option<&(dyn Error + 'static)> {
          Some(&self.source)
      }
  }

  #[derive(Debug)]
  struct SourceError {
      message: String,
  }

  impl fmt::Display for SourceError {
      fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
          write!(f, "SourceError has message: {}", self.message)
      }
  }

  impl Error for SourceError {}

  fn get_super_error() -> Result<(), SuperError> {
      Err(SuperError { source: SourceError{message: "Oh noes!".to_string()} })
  }

  fn main() {
      match get_super_error() {
          Err(e) => {
              println!("Error: {}", e);
              println!("Caused by: {}", e.source().unwrap());
          }
          _ => println!("No error"),
      }
  }
#+end_src
