----------------
Chapter 1
---------------

Why is the command line useful in the age of Python, R, Spark, etc?
  The command line is old and very stable. It has withstood the test of time,
  and may outlive Python, R, and Spark. It is available almost everywhere. It
  is very close to the file system, which is where the data we care about is
  stored.

Data Science is "OSEMN".
  - Obtain data
  - Scrub data
    - In “Data Jujitsu,” DJ Patil states that “80% of the work in any data project is in cleaning the data”.
  - Explore data
  - Model data
  - iNterpret data

New command line tools I learned:
  tree
  less
    Use `-R` command to turn color codes into color

-----------------
Chapter 2
-----------------

Command lines can be extended with `\` or `|`.

A shell function looks like this: `fac() { (echo 1; seq $1) | paste -s -d\* | bc; }`
Shell arguments are referenced by `$1`, etc.

The output of a command-line tool is by default passed on to the terminal,
which displays it on our screen.

`command > file` creates or overwrites file with the output of command.
`command >> file` append to the file, it will create the file if needed.

`< file command` pipes the file into the command.

`help` is like `man` for builtin shell commands. E.g. `help cd`

New command line tools I learned:
  bc - a calculator language
  paste - merge lines of files
  seq - print a sequence of numbers
  type - determine the type of a command

-----------------------
Chapter 3
-----------------------

PyPI contains a package called csvkit with the following useful utilities:
  in2csv - converts Excel files to csv
  csvlook - pretty print csv data
  csvcut - select specific columns from csv data
  sql2csv - connects to a database, runs a query, and outputs csv data

New command line tools I learned:
  curl - transfer files between computers using a variety of protocols
  curlicue - allows you to use OAuth with curl

---------------------
Chapter 4
---------------------

`!!` refers to the last entered command.
One use for this is `sudo !!`.
`echo "!!" > file` saves the last command to file.

`chmod u+x file` makes the file executable only for the owner.
`chmod +x file` makes the file executable for the owner, group, and everyone.

The proper shebang is usually like `#!/usr/bin/env bash`, this is most portable
between systems.

`$1`, `$2`, etc, refer to arguments given to a bash script.
Named arguments can be had with the following pattern:
  ARG_NAME="$1"
  command_needs_arg $ARG_NAME

Command line tools written in other languages should stream from stdin, do their
work, then stream to stdout.

New command line tools I learned:
  tr - translate, delete, or dedup characters
  uniq - filter or report repeated lines
  sort - sort lines of text
  head - print the first lines
