Functional Reactive Programming from Manning Publications (2015)

-------------------
Chapter 1
-------------------

"So we could say that all programs are fundamentally state machines. But code written in a
traditional state machine style tends to be unreadable and brittle. Any embedded C
programmer will attest to this. It also tends to be extremely efficient, which is the usual excuse
for using this style. So the job of the programmer could be seen as finding ways to organize
state machines so they are maintainable."

"How many software projects are there where they have given up entirely and just require a
program restart to pick up the new configuration? When you change something on your ADSL router,
does it take effect immediately, or are you required to reboot it?
Why is program configuration, which should be simple, such an intractable problem in practice?
Could this be indicative of something fundamental we have got wrong in the way we program?"

The publisher encouraged some changes to common FRP naming conventions:
  Behavior -> Cell
  Event -> Stream

"... sequence-dependent code can get complex. The
problem with representing dependencies as a sequence comes when you go to change the
code. To make something happen earlier or later, you need to make sure you fully understand
the dependencies implicit in the existing sequence. In FRP, you express dependencies directly,
so you can just add or remove the dependencies and the sequence is automatically updated.
It's impossible to make a sequence mistake."

"A program is a transformation from inputs to outputs."

"Reify" (verb) is a functional programming term meaning to convert an abstract
representation into real code.

"FRP code has a structure like a directed graph, and an FRP engine derives execution
order automatically from it."

------------------
Chapter 2
------------------

Java 8 has no fewer than 6 lambda syntaxes:
  (Integer k) -> { return k+1; }
  (k) -> { return k+1; }
  k -> { return k+1; }
  (Integer k) -> k+1
  (k) -> k+1
  k -> k+1

"We designed Sodium to embody [the] basic
concepts as minimally and completely as possible. Sodium and Java are just a convenient
vehicle for this purpose so we hope you won't see this book as specific to a language or FRP
system."

Stream is also known as: event, event stream, observable, signal
Cell is also known as: behavior, property, signal
"Signal" is mostly used in systems that don't distinguish between Stream and Cell.

"A stream contains events that fire at discrete times. A stream event only has a value
instantaneously when it fires, but a cell always has a value that can be sampled at any time.
Cell is how state is modeled in FRP."

"Cells are how we model state in FRP, and they are the only mechanism for doing so."

The 10 primative operations of FRP:
  map - map a function to a stream or cell to produce a new stream or cell
  merge - merge two streams, can define how to handle simultaneous events
  hold - store an event value in a cell, cells always have a value
  snapshot - fire on event from stream, read value from cell, output stream
  filter - filter a stream with a predicate function
  lift - combine two cells into a new cell using a function
  never - a stream that never fires
  constant - a cell that never changes
  sample - get the value out of a cell
  switch - modify the FRP graph; SorC (SorC x) -> SorC x

"At its heart, FRP programming consists of applying primitive operations to values of type
Stream and Cell to produce new values of these types. Primitives can be combined together
into arbitrarily complex constructions, and this is what you will find yourself doing when writing
FRP code."

"Lift is a functional programming term meaning (more generally) to make a
function that operates on values into a function that operates on some type of container of those
values."

"All state changes in FRP are caused by stream events. FRP is reactive..."

Short list of Haskell FRP libraries to consider:
  auto / varying - not "true" FRP, designed for games
  reactive-banana - popular, mature, and well documented
  reflex - has a lot of hype, claims to perform well, reflex-dom is cool

------------------------------------
Chapter 3, 4
------------------------------------

These are just extended examples, and focus a lot on the Java language. I'm
going to skip them for now.

-----------------------------------
Chapter 5
-----------------------------------

When a processor requests the value from a memory block, the desired block and
some surrounding memory is stored in the CPU cache. Teach processor has it's own
cache. The cache(s) must be updated when a write to memory happens. If multiple
processors are contending over a single piece of memory a lot of redundant work
is getting done by the cache, hurting performance. Can this system scale to
1000 processors?

Compilers are not good at optimizing for CPU caches.

"The general rule is
that memory accessed temporally nearby should be physically nearby, and each processor
should have its own local memory pool."

"Q: Why are we in this strange situation?
 A: Because modern machines are forced by current languages to pretend to be a machine
 that hasn't existed since the 1970's."

"In summary, we are programming in a bad way, because it's compatible with a non-
existent, inefficient hardware architecture, forcing us to make complicated hardware
emulations of it, so that it's complicated to optimize our software, further entrenching the
hardware emulation."

"FRP is still in its early days, and we are a long way from saying parallelism is a direct
selling point of FRP. Current FRP implementations don't do much for parallelism yet. And in
general, parallelism is not an easy problem. But FRP is inherently parallelizable in a way that
traditional programming isn't."

"We say FRP is compositional because it imposes mathematical rules that force the
interaction of program elements to be simple and predictable, without subtleties. Their
complexities add instead of multiplying, so overall complexity stays closer to proportional to
program size. Put things together, and you don't get any surprises."

"""
1. Start with a complex problem
2. Break the problem into simpler parts
3. Solve the parts
4. Compose the parts of the solution into a whole
Step 4 is where we get into trouble.
"""

"cheap abstraction leads to a sort of “enlightenment” or “superconductor effect”,
where simplicity compounds instead of complexity, and you find yourself programming at a
higher level."

---------------------------
Chapter 6
---------------------------

This chapter is focused mostly on Rx.JS and the Elm language. I just skimmed the
chapter. I will review it if I ever do FRP in Javascript.

---------------------------
Chapter 7
---------------------------

Explains the `sample` and `switch` primitives.

Contains a few very verbose game examples.

-----------------------
Chapter 8
-----------------------

Switch types:
  Stream (Stream x) -> Stream x
  Cell (Cell x) -> Cell x

Switch is kind of like a transistor, in that it takes a signal that controls
the output signal. It takes a signal of signals.

-------------------------
Chapter 9
------------------------

"Transactions" in Sodium are often called "Moments" in other FRP libraries.
