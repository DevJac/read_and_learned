* Rust
** Setup
*** Lint setup
**** rustc lints
You can see a full list of ~rustc~ lints by doing ~rustc -W help~.

I like to put the following at the top of my main source file:
#+begin_src rust
#![warn(
    warnings,
    future_incompatible,
    nonstandard_style,
    rust_2018_compatibility,
    rust_2018_idioms,
    unused
)]
#+end_src
**** clippy lints
I like to use the following bash script:
#+begin_src bash
#!/usr/bin/env bash
find . -iname "*.rs" -exec touch {} \; || exit 1
cargo clippy -- -W clippy::pedantic
#+end_src
** Types
*** Type conversion traits
**** Deref / DerefMut
Controls the deref operation. Rust will implicitly add derefs to make the code typecheck.
**** AsRef / AsMut
Controls implicit conversion to references.
***** Example
#+begin_src rust
#[derive(Debug)]
struct Point {
    x: f64,
    y: f64,
}

impl AsRef<Self> for Point {
    fn as_ref(&self) -> &Self {
        self
    }
}

fn foo(x: impl AsRef<Point>) {
    let x = x.as_ref();
    dbg!(x);
}

fn main() {
    let p = Point { x: 1.0, y: 2.0 };
    foo(&p);
    foo(p);
}
#+end_src
**** Borrow / BorrowMut
Same as ~AsRef~ and ~AsMut~ except has more implicit restrictions.
**** From / Into
Type conversion that takes ownership. It takes ownership of type ~T~ and implicitly converts to a type ~U~.
** Lifetimes
*** Lifetimes of intermediate values
If you have something like ~let x: bool = get_color().is_red();~, presumably ~get_color()~ returns a ~Color~, but then you call ~is_red()~ and end up with just a ~bool~. You could call the ~Color~ an "intermediate value", since it was a value which (at least conceptually) existed, but was never assigned to a variable and thus cannot be used again.

The lifetime rules of such intermediate values are:

1. If the intermediate value ends up being part of a variable's value, then its lifetime is the enclosing block. This is the common case.
2. If the intermediate value is in the conditional expression of an ~if~ or ~while~ loop, then its lifetime is that single conditional expression.
3. Otherwise, its lifetime is the innermost enclosing statement. Note that the tail expression of a block is part of the statement that encloses the block.
