This is a blog series found at: https://github.com/DataWookie/MonthOfJulia

-----------------
Day 1
-----------------

The evaluation of an expression is automatically printed unless you end the line
with a `;`.

`ans` refers to the value of the last expression.

Type `?` at the prompt will activate help mode.

Staring a line with `;` make it a shell command.

Pressing `ctrl+r` activates an awesome search through the command history.
This also work in the regular system shell!

`ctrl+l` clears the console. This also works in the regular system shell!

There are lots of escape codes and special characters available in Julia, see:
https://github.com/JuliaLang/julia/blob/master/doc/manual/unicode-input-table.rst

`x\^2` followed by tab will print "X squared" in a nice unicodey format.
`x\_2` followed by tab will create a subscript 2.

-----------------------------
Day 2
-----------------------------

There is an Atom IDE for Julia named uber-juno. I had to install `cmake` to get
this Atom plugin to install properly.

Juno features:
  Press `ctrl+enter` to evaluate a line.
  Press `ctrl+space` for autocomplete.

There is also an Jupyter plugin for Julia.

--------------------
Day 3
--------------------

Variables work as expected:
  a = 1
  b = c = d = 2
  e, f = 3, 4

Julia has compound expressions with 2 syntaxes:
  x = begin
      a = 1
      b = 2
      a + b
  end

  x = (a = 1; b = 2; a + b)

`const v = 1` makes it so the type of `v` cannot change. The value can change,
but a warning will be issued if it does.

`typeof(x)` gives you the type of `x`.
`Any` is at the root of the type hierarchy.
`isa(x, Type)` returns true if `x` is a subtype of `Type`.
`super(Type)` gives the supertype of `Type`. `subtypes` is the opposite function.

Some of Julia's numeric types:
  Int8
  Int32
  Int64
  UInt64
  Float64
  BigInt
  BigFloat
  Complex

Strings are immutable. There is ASCIIString and UTF8String. I think I saw that
this will change in a github issue, and that the two String types will be
unified.

Julia strings are indexed starting with 1. `end` is a special variable that
refers to the ending index of a String.

Regex strings are of the form `r"a regex"i`. Regex related functions are:
  ismatch
  match

Type conversion can use the `convert` function, or a lower-cased type function.

----------------------
Day 4
----------------------

Functions are JIT compiled the first time they are run.

Functions can be declared a variety of ways:
  function square(x)
    return x^2
  end

  square(x) = x^2

  x -> x^2

  square = function(x)
    x^2
  end

The last expression of a function is it's return value,
the "return" keyword is optional.

By convention, functions that end in `!` mutate their first argument.

`methods(foo)` can be used to see all the implementations of a function.

Type assertions `::` can be used to specify more specific function
implementations and assert types.

--------------------
Day 5
--------------------

A 1D array: x = [1, 2, 3]

`eltype(x)` gives the element type inside an array or collection.

If an array has multiple types inside of it, it might get "promoted" to an
`Array{Any,1}`.

Arrays support slicing with Python-like syntax.

Common array functions: shift!, unshift!, pop!, push!, append!
Note all of those function mutate the array in place.

Matrix: `M = [1 2 3; 4 5 6; 7 8 9]`

When indexing `:` is the same as `1:end` (beginning to end).

Dictionary: `Dict(1 => "one", 2 => "two")``

Set: `Set([1, 2, 3])`

-------------------------
Day 6
-------------------------

A custom type:
  type MyType
    attribute :: Type
  end

Subclassing:
  type MyType <: SuperType
    ...
  end

Concrete types can be instantiated but not subclassed.
Abstract types can be subclassed but not instantiated.

Immutable type:
  immutable MyType
    ...
  end

Note mutable values in an immutable type can still be mutated.

--------------------
Day 7
--------------------

Julia has:
  map
  filter
  reduce
  mapreduce

`map` can be applied to multiple collections if the function to be mapped takes
multiple arguments.

Find primes with `isprime`.

----------------
Day 8
----------------

If statements:
  if cond
    ...
  elseif cond
    ...
  else
    ...
  end

  if (cond) true_result else false_result end

  cond ? true_cond : false_cond

For loop:
  for x in xs
    ...
  end

`1:10` is a Range object. You can often treat these are regular arrays, except
they are generated lazily.

Julia has `enumerate` like Python.

Exception handling:
  try
    ...
  catch
    ...
  finally
    ...
  end

Exception functions: throw, error, warn, info

All exceptions are a subtype of `Exception`.

Julia has dollar sign substitution like bash, inside strings: "x value is: $x"

---------------------------
Day 9
---------------------------

Output: print, println
Input: readline

Files: open, close, write, tempfile, readlines, readall, eachline

Delimited Files: readdlm, readcsv, writedlm, writecsv

The `do` keyword forms an anonymous function which is passed as the first
argument to the function:
  y = map([1, 2, 3]) do x
    2x
  end

This allows automatic file closing like in Python:
  open("a file") do f
    process(f)
  end

Note, `2*x` can be written `2x`.

Julia's `...` in function definitions acts like Pythons `*`, and allows a
variable number of arguments to functions. Julia also support default values,
and keywords arguments similar to Python.

------------------------
Day 10
------------------------

Modules are namespaces, they look like so:
  module MyModule
    export some, vars
    __init__() = println("__init__ is run to initialize the module.")
    ...
  end

Modules can be brought into the current namespace using `import` or `using`.
Both behave slightly differently. Python like imports can be had with:
  import MyModule
  import MyModule: some, other, vars
  importall MyModule

---------------------------------
Day 11
---------------------------------
