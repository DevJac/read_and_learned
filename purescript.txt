-----------------------
Chapter 1 & 2
-----------------------

Purescript is a Haskell inspired programming language that compiles to
Javascript and has Javascript semantics for easy compatibility. Purescript
can call Javascript functions, and Javascript can call Purescript functions.

To use Purescript you need:
  `psc` - the Purescript compiler
  `npm` - the Node package manager
  `pulp` - a Node package that can be installed with `npm`

To install pulp I did: `npm install --prefix .node_modules -g pulp`
The `pulp` binary can then be found in `~/.node_modules/bin/pulp`.

Hello world example:
  ```
  module Main where
  import Control.Monad.Eff.Console
  main = log "Hello, World!"
  ```

Example build commands:
  pulp run
  pulp browserify
  pulp build -O --to output.js
  pulp build

To install Purescript packages run a command like:
  `bower install purescript-math --save`
  `--save` causes the bower.json files to be automatically updated with the new
  dependency.

What is the difference between npm and bower?
They are both package / dependency managers. npm comes with node, Bower is
simpler. Bower is focused on front end dependencies. It appears there is some
competition between these two programs. It appears the Purescript book uses
Bower, for managing project dependencies.

`print` from Haskell is called `logShow` in Purescript.

A Purescript repl can be started by doing: `pulp psci`
Type `:?` for help. There are only a handful of commands.

------------------------------
Chapter 3
------------------------------

Purescript bower packages:
  purescript-math
  purescript-list

Javascript has 3 primitive types:
  number (float)
  string
  boolean

Purescript defines 4 additional primitive types:
  Int
  Array
  records
  functions

`psci` has `--multi-line-mode` where commands are terminated with Ctrl-D.

A type:
  ```
  type Entry =
    { firstName :: String
    , lastName :: String
    , address
    :: Address
    }
  ```

Note `List` and `Array` are different.

Values are of a Type. Types are of a Kind.

`<<<` and `>>>` are function composition operators in Purescript.

---------------------------
Chapter 4
---------------------------

Purescript bower packages:
  purescript-maybe
  purescript-arrays
  purescript-strings
  purescript-foldable-traversable
  purescript-console
  purescript-control
  purescript-free
  purescript-tailrec

Purescript similarities to Haskell:
  lambdas
  infix functions by using backticks
  wrap operators in parenthesis to use like normal functions

Purescript has tail call optimization. The t.c.o. produces while loops in the raw
Javascript.

"One common way to turn a function which is not tail recursive into a tail recursive function is to use an
accumulator parameter. An accumulator parameter is an additional parameter which is added to a function
which accumulates a return value, as opposed to using the return value to accumulate the result."

-------------------------------
Chapter 5
-------------------------------
