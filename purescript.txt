-----------------------
Chapter 1 & 2
-----------------------

Purescript is a Haskell inspired programming language that compiles to
Javascript and has Javascript semantics for easy compatibility. Purescript
can call Javascript functions, and Javascript can call Purescript functions.

To use Purescript you need:
  `psc` - the Purescript compiler
  `npm` - the Node package manager
  `pulp` - a Node package that can be installed with `npm`

To install pulp I did: `npm install --prefix .node_modules -g pulp`
The `pulp` binary can then be found in `~/.node_modules/bin/pulp`.

Hello world example:
  ```
  module Main where
  import Control.Monad.Eff.Console
  main = log "Hello, World!"
  ```

Example build commands:
  pulp run
  pulp browserify
  pulp build -O --to output.js
  pulp build

To install Purescript packages run a command like:
  `bower install purescript-math --save`
  `--save` causes the bower.json files to be automatically updated with the new
  dependency.

What is the difference between npm and bower?
They are both package / dependency managers. npm comes with node, Bower is
simpler. Bower is focused on front end dependencies. It appears there is some
competition between these two programs. It appears the Purescript book uses
Bower, for managing project dependencies.

`print` from Haskell is called `logShow` in Purescript.

A Purescript repl can be started by doing: `pulp psci`
Type `:?` for help. There are only a handful of commands.

------------------------------
Chapter 3
------------------------------

Purescript bower packages:
  purescript-math
  purescript-list

Javascript has 3 primitive types:
  number (float)
  string
  boolean

Purescript defines 4 additional primitive types:
  Int
  Array
  records
  functions

`psci` has `--multi-line-mode` where commands are terminated with Ctrl-D.

A type:
  ```
  type Entry =
    { firstName :: String
    , lastName :: String
    , address
    :: Address
    }
  ```
Note this uses the "type" keyword rather than "data". This is a record rather
than an algebraic data type (ADTs).

Note `List` and `Array` are different.

Values are of a Type. Types are of a Kind.

`<<<` and `>>>` are function composition operators in Purescript.

---------------------------
Chapter 4
---------------------------

Purescript bower packages:
  purescript-maybe
  purescript-arrays
  purescript-strings
  purescript-foldable-traversable
  purescript-console
  purescript-control
  purescript-free
  purescript-tailrec

Purescript similarities to Haskell:
  lambdas
  infix functions by using backticks
  wrap operators in parenthesis to use like normal functions

Purescript has tail call optimization. The t.c.o. produces while loops in the raw
Javascript.

"One common way to turn a function which is not tail recursive into a tail recursive function is to use an
accumulator parameter. An accumulator parameter is an additional parameter which is added to a function
which accumulates a return value, as opposed to using the return value to accumulate the result."

-------------------------------
Chapter 5
-------------------------------

Purescript bower packages:
  purescript-globals

Purescript similarities to Haskell:
  basic pattern matching
  guards
  pattern naming with the @ symbol
  case expressions
  algebraic data types
  newtypes (data types with one constructor and one value)

In Purescript you can match Arrays of a fixed length, this is different than
Haskell. In Haskell you pattern match Lists, in Purescript you pattern match
Arrays.

Pure script has record patterns like:
  `showPerson { first: x, last: y } = y ++ ", " ++ x`
The above functions is "row polymorphic" because it can take any type, as long
as it has the required record fields with the required types. This is different
than Haskell.

Purescript has `type`, `data`, and `newtype` just like Haskell.
What is the difference between type and data?
Does `type` simply create a type synonym like in Haskell? Yes, it appears so.

-------------------------------------------------------
Chapter 6
-------------------------------------------------------

Purescript bower packages:
  purescript-tuples
  purescript-either
  purescript-functions
  purescript-monoid
  purescript-lists

Purescript has typeclasses and instances like Haskell, except instances have
names to make the generated Javascript more readable.

Common typeclasses:
  Eq
  Ord
  Num
  Semigroup
  Monoid
  Foldable
  Functor

Purescript has typeclass restrictions like Haskell, but will not infer
typeclass constraints automatically like Haskell will.

Example typeclass:
  ```
  instance showArray :: (Show a) => Show (Array a) where
    ...
  ```
This typeclass requires that `a` be an instance of `Show`. Thus, the functions
inside the typeclass can use the functions defined in `Show` without knowing the
concrete type of `a`.

Typeclasses can have multiple parameters. This is not enabled by default in
Haskell. Multi-parameter typeclasses can lead to some issue which are solved by
"type families" or "functional dependencies".

Purescript can have typeclasses with no parameters. These typeclasses can serve
as a, sort of, tag on functions. For example, you might tag a function as being
"partial". These are called "nullary typeclasses" and are available in a
Haskell extension as well.

Eq is a "superclass" of Ord. This is an example of superclasses:
  ```
  class (Eq a) <= Ord a where
    compare :: a -> a -> Ordering
  ```

--------------------------
Chapter 7
--------------------------

Purescript bower packages:
  purescript-validation
  purescript-parallel

Purescript breaks ApplicativeFunctor into two typeclasses: Apply and Applicative.

`<$>` is map from Functor.
`<*>` is apply from Apply.

Regular functions can be "lifted" to the Apply typeclass by functions like
`lift2` or `lift3`, etc. The same can be acheived by using <$> and <*> on the
regular function, e.g.:
  regFunc <$> a <*> b <*> c

This chapter talks a lot about form / data validation methods.

The traversable typeclass:
  ```
  class (Functor t, Foldable t) <= Traversable t where
    traverse :: forall a b f. (Applicative f) => (a -> f b) -> t a -> f (t b)
    sequence :: forall a f. (Applicative f) => t (f a) -> f (t a)
  ```

-------------------------
Chapter 8
-------------------------

Purescript bower packages:
  purescript-eff
  purescript-random
  purescript-exceptions
  purescript-jquery
  purescript-react
  purescript-thermite
  purescript-halogen

In Purescript Monad is broken into Bind and Monad.

Purescript uses the Eff Monad for side-effects. It is similar to the IO Monad in
Haskell.

The Eff Monad can specify exactly which side-effects will happen. Thus, the
type signature of the `main` method can tell you what side effects the entire
program will have.

"""
Functions such as print and random are called actions. Actions have the Eff type on the right hand side of
their functions, and their purpose is to introduce new effects.
This is in contrast to handlers, in which the Eff type appears as the type of a function argument. While actions
add to the set of required effects, a handler usually subtracts effects from the set.
"""

Purescript has a ST Monad like Haskell. ST combined with `forE`, `foreachE`,
`whileE`, and `untilE` allow mutable variables and traditional loops in the
generated Javascript.

virtual-dom is a useful Javascript library I should look into later.

Making interactive webpages with Purescript still involves registering event
handlers on the DOM.
